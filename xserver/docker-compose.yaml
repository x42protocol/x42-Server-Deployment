version: '3.9'
services:
  x42server:
    image: x42protocoldocker/x42serverd:v4.1.0
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.x42server.rule=Host(`${XSERVER_BACKEND}`)"
      - "traefik.http.routers.x42server.middlewares=x42server"  
      - "traefik.http.routers.x42server.entrypoints=websecure"
      - "traefik.http.routers.x42server.tls.certresolver=myresolver"
      - "traefik.http.routers.x42server.tls.options=private@file" 
      
      - "traefik.http.routers.x42server-public.rule=Host(`${XSERVERPUBLIC_BACKEND}`) &&(PathPrefix(`/ping`)||PathPrefix(`/gettop`)||PathPrefix(`/registerserver`)||PathPrefix(`/getactivecount`)||PathPrefix(`/getactivexservers`)||PathPrefix(`/searchforxserver`)||PathPrefix(`/getprofile`)||PathPrefix(`/reserveprofile`)||PathPrefix(`/receiveprofilereservation`)||PathPrefix(`/getnextprofiles`)||PathPrefix(`/getprice`)||PathPrefix(`/getprices`)||PathPrefix(`/createpricelock`)||PathPrefix(`/updatepricelock`)||PathPrefix(`/getavailablepairs`)||PathPrefix(`/getpricelock`)||PathPrefix(`/submitpayment`))"
      - "traefik.http.routers.x42server-public.middlewares=x42server"  
      - "traefik.http.routers.x42server-public.entrypoints=websecure"
      - "traefik.http.routers.x42server-public.tls.certresolver=myresolver"
      - "traefik.http.routers.x42server-public.tls.options=public@file"
      
      - "traefik.http.middlewares.x42server.headers.customresponseheaders.Access-Control-Allow-Methods=POST, GET, PUT, OPTIONS, DELETE"
      - "traefik.http.middlewares.x42server.headers.customresponseheaders.Access-Control-Allow-Origin=*"
      - "traefik.http.middlewares.x42server.headers.customresponseheaders.Access-Control-Allow-Headers=x-requested-with, Content-Type,Authorization"

    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+
      - MONGOCONNECTIONSTRING=${MONGOCONNECTIONSTRING}
    command: --chain=x42
    restart: always
    depends_on:
      x42postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
    volumes:
      - type: bind
        source: ./xserver
        target: /root/.xserverdata/main/
        read_only: true
      - type: bind
        source: ./xcore
        target: /root/.blockcore/x42
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - x42network
      - proxy
    expose:
      - 4242

  x42serverui:
    image: x42protocoldocker/x42serverui:v4.1.0
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.x42serverui.rule=Host(`${XSERVER_FRONTEND}`)"
      - "traefik.http.middlewares.x42serverui.headers.customresponseheaders.Access-Control-Allow-Methods=POST, GET, PUT, OPTIONS, DELETE"
      - "traefik.http.middlewares.x42serverui.headers.customresponseheaders.Access-Control-Allow-Origin=*"
      - "traefik.http.middlewares.x42serverui.headers.customresponseheaders.Access-Control-Allow-Headers=x-requested-with, Content-Type,Authorization"
      - "traefik.http.routers.x42serverui.middlewares=x42serverui"
      - "traefik.http.routers.x42serverui.entrypoints=websecure"
      - "traefik.http.routers.x42serverui.tls.certresolver=myresolver"
      - "traefik.http.routers.x42serverui.tls.options=private@file" 
    restart: always
    depends_on:
      - "x42core"
      - "x42server"
    volumes:
      - type: bind
        source: ./xserverui/app.config.json
        target: /usr/share/nginx/html/assets/app.config.json
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - x42network
      - proxy
    expose:
      - 80

  x42serverworker:
    image: x42protocoldocker/x42serverworker:v4.1.0
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+
      - MONGOCONNECTIONSTRING=${MONGOCONNECTIONSTRING}
    restart: always
    depends_on:
      mongo:
        condition: service_healthy
      x42core:
        condition: service_healthy
    networks:
      - x42network

  x42core:
    image: x42protocoldocker/x42blockcorenode:v1.1.46
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.x42core.rule=Host(`${XCORE_BACKEND}`)"
      - "traefik.http.middlewares.x42core.headers.customresponseheaders.Access-Control-Allow-Methods=POST, GET, PUT, OPTIONS, DELETE"
      - "traefik.http.middlewares.x42core.headers.customresponseheaders.Access-Control-Allow-Origin=*"
      - "traefik.http.middlewares.x42core.headers.customresponseheaders.Access-Control-Allow-Headers=x-requested-with, Content-Type,Authorization"
      - "traefik.http.routers.x42core.middlewares=x42core"
      - "traefik.http.routers.x42core.entrypoints=websecure"
      - "traefik.http.routers.x42core.tls.certresolver=myresolver"
      - "traefik.http.routers.x42core.tls.options=private@file" 
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+
    healthcheck:
      test: "curl -f localhost:42220/ping"
      interval: 5s
      timeout: 5s
      retries: 20
    command: --chain=x42 -txindex=1 -addressindex=1
    restart: always
    ports:
      - "0.0.0.0:52342:52342" #Blockcore Port
      - "0.0.0.0:52343:52343" #RPC Port
      - "0.0.0.0:42222:42222" #wsPort
    volumes:
      - type: bind
        source: ./xcore
        target: /root/.blockcore/x42
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - x42network
      - proxy
    expose:
      - 42220
    
  x42postgres:
      image: postgres:14.2-alpine3.15
      restart: always
      environment:
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB}
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 10s
        timeout: 5s
        retries: 5
      logging:
        options:
          max-size: 10m
          max-file: "3"
      ports:
        - '5432:5432'
      volumes: 
        - /var/x42/postgres-data:/var/lib/postgresql/data
      networks:
        - x42network

#  mongo-express:
#    image: mongo-express
#    restart: always
#    ports:
#      - 8081:8081
#    environment:
#      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USER}
#      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
#      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo:27017/
#    networks:
#      - x42network

  mongo:
    container_name: xDocumentStore
    image: mongo:5.0.9
    mem_limit: 512m
    cpus: 0.200
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    stop_grace_period: 5m
    volumes:
      - /var/x42/mongo-db:/data/db
      - /var/x42/mongo-configdb:/data/configdb
    networks:
      - x42network
     

networks:
  x42network:
    external: false
    name: x42network
  proxy:
    external: true
    name: proxy
